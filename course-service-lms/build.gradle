plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id 'checkstyle'
	id 'pmd'
	id 'com.github.spotbugs' version '5.0.13'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
	testImplementation 'org.mockito:mockito-core:5.2.0'
	testImplementation 'org.mockito:mockito-junit-jupiter:5.2.0'
	testImplementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
	testImplementation 'jakarta.validation:jakarta.validation-api:3.0.2'
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.10"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}

checkstyle {
	toolVersion = '10.12.1'
	configFile = file("${rootDir}/config/checkstyle-checker.xml")
	configProperties = [
			'checkstyle.cache.file': "${buildDir}/checkstyle.cache"
	]
	showViolations = true
}

tasks.withType(Checkstyle).configureEach {
	ignoreFailures = false // Fail build on violations
}

pmd {
	toolVersion = '6.55.0' // Latest stable as of now
	consoleOutput = true
	ignoreFailures = false
}

spotbugs {
	toolVersion = '4.8.5'
	ignoreFailures = false
	showProgress = true
	effort = 'max'
	reportLevel = 'medium'
	reportsDir = file("$buildDir/reports/spotbugs")
}

spotbugsMain {
	reports {
		html.enabled = true
		xml.enabled = false
	}
}

spotbugsTest {
	reports {
		html.enabled = true
		xml.enabled = false
	}
}

// If you need to execute spotbugs during the build process
tasks.named('check') {
	dependsOn 'spotbugsMain'
}
